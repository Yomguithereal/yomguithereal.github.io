{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./node_modules/gatsby-mdx/mdx-renderer.js","webpack:///./node_modules/core-js/modules/_bind.js","webpack:///./node_modules/github-slugger/index.js","webpack:///./node_modules/github-slugger/node_modules/emoji-regex/index.js","webpack:///./node_modules/prism-react-renderer/es/vendor/prism/prism-core.js","webpack:///./node_modules/prism-react-renderer/themes/duotoneDark.js","webpack:///./node_modules/prism-react-renderer/es/vendor/prism/index.js","webpack:///./node_modules/prism-react-renderer/es/defaultProps.js","webpack:///./node_modules/prism-react-renderer/es/utils/normalizeTokens.js","webpack:///./node_modules/prism-react-renderer/es/utils/themeToDict.js","webpack:///./node_modules/prism-react-renderer/es/components/Highlight.js","webpack:///./node_modules/prism-react-renderer/es/index.js"],"names":["$export","__webpack_require__","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","S","Target","args","newTarget","arguments","length","$args","push","apply","proto","prototype","instance","Object","result","Function","call","React","require","useMDXComponents","mdx","useMDXScope","module","_ref","scope","components","children","props","_objectWithoutPropertiesLoose","mdxComponents","mdxScope","End","useMemo","fullScope","_objectSpread","keys","values","map","key","_construct","concat","fn","createElement","invoke","arraySlice","slice","factories","exports","that","this","partArgs","bound","len","n","i","join","emoji","BananaSlug","own","hasOwnProperty","whitespace","specials","reset","slug","value","maintainCase","string","toLowerCase","trim","replace","slugger","originalSlug","occurrences","uniqueId","_","Token","Prism","util","encode","tokens","type","content","alias","o","toString","match","objId","obj","defineProperty","clone","visited","forEach","v","languages","extend","id","redef","lang","insertBefore","inside","before","insert","root","grammar","newToken","ret","token","DFS","callback","plugins","highlight","text","language","env","code","tokenize","stringify","matchGrammar","strarr","index","startPos","oneshot","target","patterns","j","pattern","lookbehind","greedy","lookbehindLength","global","flags","RegExp","source","pos","str","lastIndex","exec","from","to","k","p","delNum","after","wrapped","Array","splice","hooks","add","rest","matchedStr","parent","element","tag","classes","attributes","aliases","name","default","plain","backgroundColor","color","styles","types","style","opacity","textDecorationLine","fontStyle","fontWeight","keywords","className","prism_core_default","a","markup","comment","prolog","doctype","cdata","punctuation","namespace","attr-value","attr-name","entity","tagName","includedCdataInside","included-cdata","def","xml","html","mathml","svg","insideString","variable","number","operator","bash","shebang","function","keyword","boolean","shell","clike","class-name","c","macro","directive","constant","cpp","raw-string","css","atrule","rule","url","selector","property","important","addInlined","style-attr","pseudo-element","pseudo-class","class","attribute","case-sensitivity","n-th","hexcode","unit","javascript","regex","function-variable","parameter","template-string","interpolation","interpolation-punctuation","js","jsx","spread","script","script-punctuation","stringifyToken","walkTokens","openedTags","notTagNorBrace","pop","openedBraces","plainText","javaDocLike","javadoclike","docLanguage","definition","doc-comment","isArray","l","docCommentSupport","addSupport","java","annotation","generics","getPlaceholder","toUpperCase","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","placeholder","indexOf","tokenizePlaceholders","t","s","substring","middle","replacement","php","shell-comment","delimiter","package","string_interpolation","nowdoc-string","heredoc-string","single-quoted-string","double-quoted-string","test","parameterPrefix","jsdoc","optional-parameter","example","actionscript","coffeescript","class-member","multiline-comment","block-regex","inline-javascript","multiline-string","coffee","method-variable","method","known-class-name","unshift","arrow","property-access","maybe-class-name","dom","console","maybeClassNameTokens","flow","flow-punctuation","n4js","n4jsd","typescript","builtin","ts","diff","coord","deleted","inserted","git","command","commit_sha1","go","graphql","fragment","handlebars","block","brackets","json","null","less","mixin-usage","makefile","symbol","markdown","blockquote","code-block","code-language","title","hr","list","url-reference","bold","italic","strike","codeLang","codeBlock","split","cls","md","objectivec","ocaml","python","string-interpolation","format-spec","conversion-option","triple-quoted-string","decorator","py","reason","character","constructor","label","sass","atrule-line","variable-line","property-line","scss","statement","sql","func","stylus","atrule-declaration","variable-declaration","property-declaration","wasm","yaml","scalar","datetime","yml","prism","es_defaultProps","theme","newlineRe","normalizeEmptyLines","line","empty","appendTypes","typesSize","utils_normalizeTokens","typeArrStack","tokenArrStack","tokenArrIndexStack","tokenArrSizeStack","stackIndex","currentLine","acc","splitByNewlines","newlineCount","_i","_extends","assign","utils_themeToDict","base","themeDict","reduce","themeEntry","includes","accStyle","Highlight_extends","excluded","sourceKeys","components_Highlight","_Component","subClass","superClass","Highlight","_this","_len","_key","prevTheme","prevLanguage","getThemeDict","undefined","getLineProps","output","getStyleForToken","_ref2","display","baseStyle","typeStyles","getTokenProps","_ref3","__proto__","render","_this$props","mixedTokens","react","d","__webpack_exports__"],"mappings":"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","file":"6-f1d67aeea54bb3b9ab55.js","sourcesContent":["// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","const React = require(\"react\");\nconst { useMDXComponents, mdx } = require(\"@mdx-js/react\");\nconst { useMDXScope } = require(\"./context\");\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components);\n  const mdxScope = useMDXScope(scope);\n\n  // Memoize the compiled component\n  const End = React.useMemo(\n    () => {\n      if (!children) {\n        return null;\n      }\n\n      const fullScope = {\n        // React is here just in case the user doesn't pass them in\n        // in a manual usage of the renderer\n        React,\n        mdx,\n        ...mdxScope\n      };\n\n      const keys = Object.keys(fullScope);\n      const values = keys.map(key => fullScope[key]);\n      const fn = new Function(\"_fn\", ...keys, `${children}`);\n\n      return fn({}, ...values);\n    },\n    [children, scope]\n  );\n\n  return (\n    React.createElement(End, { components: mdxComponents, ...props })\n  );\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","require(\"core-js/modules/es6.regexp.replace\");\n\nvar emoji = require('emoji-regex');\n\nmodule.exports = BananaSlug;\nvar own = Object.hasOwnProperty;\nvar whitespace = /\\s/g;\nvar specials = /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g;\n\nfunction BananaSlug() {\n  var self = this;\n  if (!(self instanceof BananaSlug)) return new BananaSlug();\n  self.reset();\n}\n/**\n * Generate a unique slug.\n * @param  {string} value String of text to slugify\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\n * @return {string}       A unique slug string\n */\n\n\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  var self = this;\n  var slug = slugger(value, maintainCase === true);\n  var originalSlug = slug;\n\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++;\n    slug = originalSlug + '-' + self.occurrences[originalSlug];\n  }\n\n  self.occurrences[slug] = 0;\n  return slug;\n};\n/**\n * Reset - Forget all previous slugs\n * @return void\n */\n\n\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null);\n};\n\nfunction slugger(string, maintainCase) {\n  if (typeof string !== 'string') return '';\n  if (!maintainCase) string = string.toLowerCase();\n  return string.trim().replace(specials, '').replace(emoji(), '').replace(whitespace, '-');\n}","module.exports = function () {\n  return /[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2694\\u2696\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED0\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3]|\\uD83E[\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]|\\uD83C\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uD83C\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uD83C\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uD83C\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF8\\uDDFE\\uDDFF]|\\uD83C\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uD83C\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uD83C\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uD83C\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uD83C\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uD83C\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uD83C\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uD83C\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uD83C\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uD83C\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uD83C\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uD83C\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uD83C\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uD83C\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uD83C\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uD83C\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|[#\\*0-9]\\u20E3/g;\n};","require(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n * MIT license http://www.opensource.org/licenses/mit-license.php/\r\n * @author Lea Verou http://lea.verou.me\r\n */\n\n/**\r\n * prism-react-renderer:\r\n * This file has been modified to remove:\r\n * - globals and window dependency\r\n * - worker support\r\n * - highlightAll and other element dependent methods\r\n * - _.hooks helpers\r\n * - UMD/node-specific hacks\r\n * It has also been run through prettier\r\n */\nvar Prism = function () {\n  // Private helper vars\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function type(o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function objId(obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function clone(o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\r\n       * Insert a token before another token in a language literal\r\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\r\n       * we cannot just provide an object, we need anobject and a key.\r\n       * @param inside The key (or language id) of the parent\r\n       * @param before The key to insert before. If not provided, the function appends instead.\r\n       * @param insert Object with the key/value pairs to insert\r\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\r\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      env.tokens = _.tokenize(env.code, env.grammar);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function matchGrammar(text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n            if (delNum != 1) _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            if (oneshot) break;\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function add() {}\n    },\n    tokenize: function tokenize(text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n\nmodule.exports = Prism;\nPrism.default = Prism;","// @flow\n// Duotone Dark\n// Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes)\n// Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-evening-dark.css)\n// Generated with Base16 Builder (https://github.com/base16-builder/base16-builder)\n\n/*:: import type { PrismTheme } from '../src/types' */\nvar theme\n/*: PrismTheme */\n= {\n  plain: {\n    backgroundColor: \"#2a2734\",\n    color: \"#9a86fd\"\n  },\n  styles: [{\n    types: [\"comment\", \"prolog\", \"doctype\", \"cdata\", \"punctuation\"],\n    style: {\n      color: \"#6c6783\"\n    }\n  }, {\n    types: [\"namespace\"],\n    style: {\n      opacity: 0.7\n    }\n  }, {\n    types: [\"tag\", \"operator\", \"number\"],\n    style: {\n      color: \"#e09142\"\n    }\n  }, {\n    types: [\"property\", \"function\"],\n    style: {\n      color: \"#9a86fd\"\n    }\n  }, {\n    types: [\"tag-id\", \"selector\", \"atrule-id\"],\n    style: {\n      color: \"#eeebff\"\n    }\n  }, {\n    types: [\"attr-name\"],\n    style: {\n      color: \"#c4b9fe\"\n    }\n  }, {\n    types: [\"boolean\", \"string\", \"entity\", \"url\", \"attr-value\", \"keyword\", \"control\", \"directive\", \"unit\", \"statement\", \"regex\", \"at-rule\", \"placeholder\", \"variable\"],\n    style: {\n      color: \"#ffcc99\"\n    }\n  }, {\n    types: [\"deleted\"],\n    style: {\n      textDecorationLine: \"line-through\"\n    }\n  }, {\n    types: [\"inserted\"],\n    style: {\n      textDecorationLine: \"underline\"\n    }\n  }, {\n    types: [\"italic\"],\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, {\n    types: [\"important\", \"bold\"],\n    style: {\n      fontWeight: \"bold\"\n    }\n  }, {\n    types: [\"important\"],\n    style: {\n      color: \"#c4b9fe\"\n    }\n  }]\n};\nmodule.exports = theme;","import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport Prism from './prism-core';\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  var insideString = {\n    variable: [// Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        variable: [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        operator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        punctuation: /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // Command Substitution\n    {\n      pattern: /\\$\\([^)]+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        variable: /^\\$\\(|^`|\\)$|`$/\n      }\n    }, /\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\])#.*/,\n      lookbehind: true\n    },\n    'string': [//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'variable': insideString.variable,\n    // Originally based on http://ss64.com/bash/\n    'function': {\n      pattern: /(^|[\\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/\n  };\n  var inside = insideString.variable[1].inside;\n  inside.string = Prism.languages.bash.string;\n  inside['function'] = Prism.languages.bash['function'];\n  inside.keyword = Prism.languages.bash.keyword;\n  inside['boolean'] = Prism.languages.bash['boolean'];\n  inside.operator = Prism.languages.bash.operator;\n  inside.punctuation = Prism.languages.bash.punctuation;\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n  'number': /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'class-name': {\n    pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\n/* \"prismjs/components/prism-css\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-]+?[\\s\\S]*?(?:;|(?=\\s*\\{))/i,\n      inside: {\n        'rule': /@[\\w-]+/ // See rest below\n\n      }\n    },\n    'url': RegExp('url\\\\((?:' + string.source + '|.*?)\\\\)', 'i'),\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n        inside: {\n          'attr-name': {\n            pattern: /^\\s*style/i,\n            inside: markup.tag.inside\n          },\n          'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          'attr-value': {\n            pattern: /.+/i,\n            inside: Prism.languages.css\n          }\n        },\n        alias: 'language-css'\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\nPrism.languages.css.selector = {\n  pattern: Prism.languages.css.selector,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': {\n      pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n      greedy: true,\n      inside: {\n        'punctuation': /^\\[|\\]$/,\n        'case-sensitivity': {\n          pattern: /(\\s)[si]$/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'namespace': {\n          pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\|$/\n          }\n        },\n        'attribute': {\n          pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n          lookbehind: true\n        },\n        'value': [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n          pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n          lookbehind: true\n        }],\n        'operator': /[|~*^$]?=/\n      }\n    },\n    'n-th': {\n      pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'number': /[\\dn]+/,\n        'operator': /[+-]/\n      }\n    },\n    'punctuation': /[()]/\n  }\n};\nPrism.languages.insertBefore('css', 'property', {\n  'variable': {\n    pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('css', 'function', {\n  'operator': {\n    pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n    lookbehind: true\n  },\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'unit': {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: true\n  },\n  'number': /-?[\\d.]+/\n});\n/* \"prismjs/components/prism-javascript\" */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  'number': /\\b(?:(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\\d+n|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\${[^}]+}/,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {} else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-javadoclike\" */\n\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n/* \"prismjs/components/prism-java\" */\n\n\n(function (Prism) {\n  var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/; // based on the java naming conventions\n\n  var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, // variables and parameters\n    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n    /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    },\n    'namespace': {\n      pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-markup-templating\" */\n\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function value(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function value(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-php\" */\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n/* \"prismjs/components/prism-jsdoc\" */\n\n\n(function (Prism) {\n  var javascript = Prism.languages.javascript;\n  var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;\n  var parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';\n  Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n    'parameter': {\n      // @param {string} foo - foo bar\n      pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }\n  });\n  Prism.languages.insertBefore('jsdoc', 'keyword', {\n    'optional-parameter': {\n      // @param {string} [baz.foo=\"bar\"] foo bar\n      pattern: RegExp(parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'parameter': {\n          pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\./\n          }\n        },\n        'code': {\n          pattern: /(=)[\\s\\S]*(?=\\]$)/,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        },\n        'punctuation': /[=[\\]]/\n      }\n    },\n    'class-name': [{\n      pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.,:?=<>|{}()[\\]]/\n      }\n    }, {\n      pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }],\n    'example': {\n      pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n      lookbehind: true,\n      inside: {\n        'code': {\n          pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        }\n      }\n    }\n  });\n  Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n})(Prism);\n/* \"prismjs/components/prism-actionscript\" */\n\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: /(\\.\\s*)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-flow\" */\n\n\n(function (Prism) {\n  Prism.languages.flow = Prism.languages.extend('javascript', {});\n  Prism.languages.insertBefore('flow', 'keyword', {\n    'type': [{\n      pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n      alias: 'tag'\n    }]\n  });\n  Prism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;\n  delete Prism.languages.flow['parameter'];\n  Prism.languages.insertBefore('flow', 'operator', {\n    'flow-punctuation': {\n      pattern: /\\{\\||\\|\\}/,\n      alias: 'punctuation'\n    }\n  });\n\n  if (!Array.isArray(Prism.languages.flow.keyword)) {\n    Prism.languages.flow.keyword = [Prism.languages.flow.keyword];\n  }\n\n  Prism.languages.flow.keyword.unshift({\n    pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n    lookbehind: true\n  });\n})(Prism);\n/* \"prismjs/components/prism-n4js\" */\n\n\nPrism.languages.n4js = Prism.languages.extend('javascript', {\n  // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n  'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n});\nPrism.languages.insertBefore('n4js', 'constant', {\n  // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n  'annotation': {\n    pattern: /@+\\w+/,\n    alias: 'operator'\n  }\n});\nPrism.languages.n4jsd = Prism.languages.n4js;\n/* \"prismjs/components/prism-typescript\" */\n\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\n/* \"prismjs/components/prism-diff\" */\n\nPrism.languages.diff = {\n  'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n  /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n  /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n  /^\\d+.*$/m],\n  // Match inserted and deleted lines. Support both +/- and >/< styles.\n  'deleted': /^[-<].*$/m,\n  'inserted': /^[+>].*$/m,\n  // Match \"different\" lines (prefixed with \"!\") in context diff.\n  'diff': {\n    'pattern': /^!(?!!).+$/m,\n    'alias': 'important'\n  }\n};\n/* \"prismjs/components/prism-git\" */\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,\n  'operator': /[!=|]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n\n\nPrism.languages.json = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'number': /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  'blockquote': {\n    // > ...\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  'code': [{\n    // Prefixed by 4 spaces or 1 tab\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    // `code`\n    // ``code``\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }, {\n    // ```optional language\n    // code block\n    // ```\n    pattern: /^```[\\s\\S]*?^```$/m,\n    greedy: true,\n    inside: {\n      'code-block': {\n        pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n        lookbehind: true\n      },\n      'code-language': {\n        pattern: /^(```).+/,\n        lookbehind: true\n      },\n      'punctuation': /```/\n    }\n  }],\n  'title': [{\n    // title 1\n    // =======\n    // title 2\n    // -------\n    pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    // # title 1\n    // ###### title 6\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: true,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  'hr': {\n    // ***\n    // ---\n    // * * *\n    // -----------\n    pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'list': {\n    // * item\n    // + item\n    // - item\n    // 1. item\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    // [id]: http://example.com \"Optional title\"\n    // [id]: http://example.com 'Optional title'\n    // [id]: http://example.com (Optional title)\n    // [id]: <http://example.com> \"Optional title\"\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      'variable': {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: true\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      'punctuation': /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  'bold': {\n    // **strong**\n    // __strong__\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  'italic': {\n    // *em*\n    // _em_\n    // Allow only one line break\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^[*_]|[*_]$/\n    }\n  },\n  'strike': {\n    // ~~strike through~~\n    // ~strike~\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'punctuation': /^~~?|~~?$/\n    }\n  },\n  'url': {\n    // [example](http://example.com \"Optional title\")\n    // [example] [id]\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      'variable': {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: true\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\n['bold', 'italic', 'strike'].forEach(function (token) {\n  ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n    if (token !== inside) {\n      Prism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];\n    }\n  });\n});\nPrism.hooks.add('after-tokenize', function (env) {\n  if (env.language !== 'markdown' && env.language !== 'md') {\n    return;\n  }\n\n  function walkTokens(tokens) {\n    if (!tokens || typeof tokens === 'string') {\n      return;\n    }\n\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      var token = tokens[i];\n\n      if (token.type !== 'code') {\n        walkTokens(token.content);\n        continue;\n      }\n\n      var codeLang = token.content[1];\n      var codeBlock = token.content[3];\n\n      if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n        // this might be a language that Prism does not support\n        var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n        if (!codeBlock.alias) {\n          codeBlock.alias = [alias];\n        } else if (typeof codeBlock.alias === 'string') {\n          codeBlock.alias = [codeBlock.alias, alias];\n        } else {\n          codeBlock.alias.push(alias);\n        }\n      }\n    }\n  }\n\n  walkTokens(env.tokens);\n});\nPrism.hooks.add('wrap', function (env) {\n  if (env.type !== 'code-block') {\n    return;\n  }\n\n  var codeLang = '';\n\n  for (var i = 0, l = env.classes.length; i < l; i++) {\n    var cls = env.classes[i];\n    var match = /language-(.+)/.exec(cls);\n\n    if (match) {\n      codeLang = match[1];\n      break;\n    }\n  }\n\n  var grammar = Prism.languages[codeLang];\n\n  if (!grammar) {\n    return;\n  } // reverse Prism.util.encode\n\n\n  var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n  env.content = Prism.highlight(code, grammar, codeLang);\n});\nPrism.languages.md = Prism.languages.markdown;\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)*url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nPrism.languages.yml = Prism.languages.yaml;\nexport default Prism;","import Prism from './vendor/prism';\nimport theme from '../themes/duotoneDark';\nvar defaultProps = {\n  // $FlowFixMe\n  Prism: Prism,\n  theme: theme\n};\nexport default defaultProps;","import \"core-js/modules/es6.regexp.split\";\nvar newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\n\nvar normalizeEmptyLines = function normalizeEmptyLines(line) {\n  if (line.length === 0) {\n    line.push({\n      types: [\"plain\"],\n      content: \"\",\n      empty: true\n    });\n  } else if (line.length === 1 && line[0].content === \"\") {\n    line[0].empty = true;\n  }\n};\n\nvar appendTypes = function appendTypes(types, add) {\n  var typesSize = types.length;\n\n  if (typesSize > 0 && types[typesSize - 1] === add) {\n    return types;\n  }\n\n  return types.concat(add);\n}; // Takes an array of Prism's tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type \"plain\".\n// This is not recursive to avoid exceeding the call-stack limit, since it's unclear\n// how nested Prism's tokens can become\n\n\nvar normalizeTokens = function normalizeTokens(tokens) {\n  var typeArrStack = [[]];\n  var tokenArrStack = [tokens];\n  var tokenArrIndexStack = [0];\n  var tokenArrSizeStack = [tokens.length];\n  var i = 0;\n  var stackIndex = 0;\n  var currentLine = [];\n  var acc = [currentLine];\n\n  while (stackIndex > -1) {\n    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {\n      var content = void 0;\n      var types = typeArrStack[stackIndex];\n      var tokenArr = tokenArrStack[stackIndex];\n      var token = tokenArr[i]; // Determine content and append type to types if necessary\n\n      if (typeof token === \"string\") {\n        types = stackIndex > 0 ? types : [\"plain\"];\n        content = token;\n      } else {\n        types = appendTypes(types, token.type);\n\n        if (token.alias) {\n          types = appendTypes(types, token.alias);\n        }\n\n        content = token.content;\n      } // If token.content is an array, increase the stack depth and repeat this while-loop\n\n\n      if (typeof content !== \"string\") {\n        stackIndex++;\n        typeArrStack.push(types);\n        tokenArrStack.push(content);\n        tokenArrIndexStack.push(0);\n        tokenArrSizeStack.push(content.length);\n        continue;\n      } // Split by newlines\n\n\n      var splitByNewlines = content.split(newlineRe);\n      var newlineCount = splitByNewlines.length;\n      currentLine.push({\n        types: types,\n        content: splitByNewlines[0]\n      }); // Create a new line for each string on a new line\n\n      for (var _i = 1; _i < newlineCount; _i++) {\n        normalizeEmptyLines(currentLine);\n        acc.push(currentLine = []);\n        currentLine.push({\n          types: types,\n          content: splitByNewlines[_i]\n        });\n      }\n    } // Decreate the stack depth\n\n\n    stackIndex--;\n    typeArrStack.pop();\n    tokenArrStack.pop();\n    tokenArrIndexStack.pop();\n    tokenArrSizeStack.pop();\n  }\n\n  normalizeEmptyLines(currentLine);\n  return acc;\n};\n\nexport default normalizeTokens;","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.object.assign\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar themeToDict = function themeToDict(theme, language) {\n  var plain = theme.plain; // $FlowFixMe\n\n  var base = Object.create(null);\n  var themeDict = theme.styles.reduce(function (acc, themeEntry) {\n    var types = themeEntry.types,\n        languages = themeEntry.languages,\n        style = themeEntry.style;\n\n    if (languages && !languages.includes(language)) {\n      return acc;\n    }\n\n    themeEntry.types.forEach(function (type) {\n      // $FlowFixMe\n      var accStyle = _extends({}, acc[type], style);\n\n      acc[type] = accStyle;\n    });\n    return acc;\n  }, base); // $FlowFixMe\n\n  themeDict.root = plain; // $FlowFixMe\n\n  themeDict.plain = _extends({}, plain, {\n    backgroundColor: null\n  });\n  return themeDict;\n};\n\nexport default themeToDict;","import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.object.assign\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport normalizeTokens from \"../utils/normalizeTokens\";\nimport themeToDict from \"../utils/themeToDict\";\n\nvar Highlight =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Highlight, _Component);\n\n  function Highlight() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.prevTheme = void 0;\n    _this.prevLanguage = void 0;\n    _this.themeDict = void 0;\n\n    _this.getThemeDict = function (props) {\n      if (_this.themeDict !== undefined && props.theme === _this.prevTheme && props.language === _this.prevLanguage) {\n        return _this.themeDict;\n      }\n\n      _this.prevTheme = props.theme;\n      _this.prevLanguage = props.language;\n      var themeDict = props.theme ? themeToDict(props.theme, props.language) : undefined;\n      return _this.themeDict = themeDict;\n    };\n\n    _this.getLineProps = function (_ref) {\n      var key = _ref.key,\n          className = _ref.className,\n          style = _ref.style,\n          line = _ref.line,\n          rest = _objectWithoutPropertiesLoose(_ref, [\"key\", \"className\", \"style\", \"line\"]);\n\n      var output = _extends({}, rest, {\n        className: \"token-line\",\n        style: undefined,\n        key: undefined\n      });\n\n      var themeDict = _this.getThemeDict(_this.props);\n\n      if (themeDict !== undefined) {\n        output.style = themeDict.plain;\n      }\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) output.key = key;\n      if (className) output.className += \" \" + className;\n      return output;\n    };\n\n    _this.getStyleForToken = function (_ref2) {\n      var types = _ref2.types,\n          empty = _ref2.empty;\n      var typesSize = types.length;\n\n      var themeDict = _this.getThemeDict(_this.props);\n\n      if (themeDict === undefined) {\n        return undefined;\n      } else if (typesSize === 1 && types[0] === \"plain\") {\n        return empty ? {\n          display: \"inline-block\"\n        } : undefined;\n      } else if (typesSize === 1 && !empty) {\n        return themeDict[types[0]];\n      }\n\n      var baseStyle = empty ? {\n        display: \"inline-block\"\n      } : {}; // $FlowFixMe\n\n      var typeStyles = types.map(function (type) {\n        return themeDict[type];\n      });\n      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));\n    };\n\n    _this.getTokenProps = function (_ref3) {\n      var key = _ref3.key,\n          className = _ref3.className,\n          style = _ref3.style,\n          token = _ref3.token,\n          rest = _objectWithoutPropertiesLoose(_ref3, [\"key\", \"className\", \"style\", \"token\"]);\n\n      var output = _extends({}, rest, {\n        className: \"token \" + token.types.join(\" \"),\n        children: token.content,\n        style: _this.getStyleForToken(token),\n        key: undefined\n      });\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) output.key = key;\n      if (className) output.className += \" \" + className;\n      return output;\n    };\n\n    return _this;\n  }\n\n  var _proto = Highlight.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Prism = _this$props.Prism,\n        language = _this$props.language,\n        code = _this$props.code,\n        children = _this$props.children;\n    var themeDict = this.getThemeDict(this.props);\n    var grammar = Prism.languages[language];\n    var mixedTokens = grammar !== undefined ? Prism.tokenize(code, grammar, language) : [code];\n    var tokens = normalizeTokens(mixedTokens);\n    return children({\n      tokens: tokens,\n      className: \"prism-code language-\" + language,\n      style: themeDict !== undefined ? themeDict.root : {},\n      getLineProps: this.getLineProps,\n      getTokenProps: this.getTokenProps\n    });\n  };\n\n  return Highlight;\n}(Component);\n\nexport default Highlight;","import Prism from './vendor/prism';\nimport defaultProps from './defaultProps';\nimport Highlight from './components/Highlight';\nexport { Prism, defaultProps };\nexport default Highlight;"],"sourceRoot":""}